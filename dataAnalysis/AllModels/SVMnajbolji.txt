from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input
from tensorflow.keras.preprocessing.image import img_to_array
from sklearn.svm import SVC
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score
import numpy as np
import collections

# Load pre-trained ResNet50 model + higher level layers
base_model = ResNet50(weights='imagenet', include_top=False, pooling='avg')

# Function to extract features
def extract_features(images):
    features = []
    for img in images:
        img = img_to_array(img)
        img = np.expand_dims(img, axis=0)
        img = preprocess_input(img)
        feature = base_model.predict(img)
        features.append(feature.flatten())
    return np.array(features)

# Assuming X_train_resized and X_test_resized are available
X_train_features = extract_features(X_train_resized)
X_test_features = extract_features(X_test_resized)

# Encode the labels
label_encoder = LabelEncoder()
y_train_encoded = label_encoder.fit_transform(y_train)
y_test_encoded = label_encoder.transform(y_test)

# Train SVM classifier
svm_classifier = SVC(kernel='linear', class_weight='balanced')
svm_classifier.fit(X_train_features, y_train_encoded)

# Predict and evaluate
y_pred = svm_classifier.predict(X_test_features)
accuracy = accuracy_score(y_test_encoded, y_pred)
print(f"Accuracy: {accuracy:.4f}")
print(classification_report(y_test_encoded, y_pred, target_names=label_encoder.classes_.astype(str)))